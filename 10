Ex. No: 10(a) FIRST FIT MEMORY ALLOCATION
AIM: To write a C program to implement First fit Memory allocation technique
ALGORITHM
1.
Enter the number of blocks and number of files.
2.
Enter the size of the blocks.
3.
Enter the size of the files.
4.
First fit chooses the first available block that is large enough.
5.
Display File number, File size, Occupied block number and size.
PROGRAM: (FIRST FIT MEMORY MANAGEMENT):
#include <stdio.h>
#define MAX_BLOCKS 25
void main() {
int frag[MAX_BLOCKS], blocks[MAX_BLOCKS], files[MAX_BLOCKS], allocated[MAX_BLOCKS] = {0}, blockFit[MAX_BLOCKS];
int nb, nf, temp, highest = 0;
printf("\n\tMemory Management Scheme - First Fit\n");
printf("Enter the number of blocks: ");
scanf("%d", &nb);
printf("Enter the number of files: ");
scanf("%d", &nf);
printf("\nEnter the size of the blocks:\n");
for (int i = 1; i <= nb; i++) {
printf("Block %d:", i);
scanf("%d", &blocks[i]);
}
printf("Enter the size of the files:\n");
for (int i = 1; i <= nf; i++) {
printf("File %d:", i);
scanf("%d", &files[i]);
}
for (int i = 1; i <= nf; i++) {
for (int j = 1; j <= nb; j++) {
if (!allocated[j] && (temp = blocks[j] - files[i]) >= 0 && highest < temp) {
blockFit[i] = j;
highest = temp;
}
}
frag[i] = highest;
allocated[blockFit[i]] = 1;
highest = 0;
}
printf("\nFile_no:\tFile_size :\tBlock_no:\tBlock_size:\tFragment");
for (int i = 1; i <= nf; i++)
printf("\n%d\t\t%d\t\t%d\t\t%d\t\t%d", i, files[i], blockFit[i], blocks[blockFit[i]], frag[i]);
printf("\n");
}
OUTPUT :
RESULT
Thus, first fit Memory allocation technique was executed successfully.




Ex. No: 10(b) WORST FIT MEMORY ALLOCATION
AIM: To write a C program to implement Worst fit Memory allocation technique
ALGORITHM
1.
Enter the number of blocks and number of files.
2.
Enter the size of the blocks.
3.
Enter the size of the files.
4.
Worst fit occupies the largest available block.
5.
Display File number, File size, occupied block number and size.
PROGRAM: (WORST FIT MEMORY MANAGEMENT) :
#include <stdio.h>
#define MAX_BLOCKS 25
void main() {
int frag[MAX_BLOCKS], blocks[MAX_BLOCKS], files[MAX_BLOCKS], allocated[MAX_BLOCKS] = {0}, blockFit[MAX_BLOCKS];
int nb, nf, temp;
printf("\n\tMemory Management Scheme - Worst Fit\n");
printf("\nEnter the number of blocks: ");
scanf("%d", &nb);
printf("Enter the number of files: ");
scanf("%d", &nf);
printf("\nEnter the size of the blocks:\n");
for (int i = 1; i <= nb; i++) {
printf("Block %d:", i);
scanf("%d", &blocks[i]);
}
printf("Enter the size of the files:\n");
for (int i = 1; i <= nf; i++) {
printf("File %d:", i);
scanf("%d", &files[i]);
}
for (int i = 1; i <= nf; i++) {
int maxFragment = -1;
for (int j = 1; j <= nb; j++) {
if (!allocated[j] && (temp = blocks[j] - files[i]) >= 0 && temp > maxFragment) {
blockFit[i] = j;
maxFragment = temp;
}
}
frag[i] = maxFragment;
allocated[blockFit[i]] = 1;
}
printf("\nFile_no:\tFile_size :\tBlock_no:\tBlock_size:\tFragment");
for (int i = 1; i <= nf; i++)
printf("\n%d\t\t%d\t\t%d\t\t%d\t\t%d\n", i, files[i], blockFit[i], blocks[blockFit[i]], frag[i]);
}
OUTPUT:
RESULT
Thus, worst fit Memory allocation technique was executed and verified successfully.





Ex. No: 10(c) BEST FIT MEMORY ALLOCATION
AIM: To write a C program to implement Best fit Memory allocation technique
ALGORITHM
1.
Enter the number of blocks and number of files.
2.
Enter the size of the blocks.
3.
Enter the size of the files.
4.
Best fit chooses the block that is closest in size to the request.
5.
Display File number, File size, occupied block number and size.
PROGRAM: (BEST FIT MEMORY MANAGEMENT)
#include <stdio.h>
#define MAX_BLOCKS 25
void main() {
int frag[MAX_BLOCKS], blocks[MAX_BLOCKS], files[MAX_BLOCKS], allocated[MAX_BLOCKS] = {0}, blockFit[MAX_BLOCKS];
int nb, nf, temp, lowest = 10000;
printf("\n\tMemory Management Scheme - Best Fit\n");
printf("\nEnter the number of blocks: ");
scanf("%d", &nb);
printf("Enter the number of files: ");
scanf("%d", &nf);
printf("\nEnter the size of the blocks:\n");
for (int i = 1; i <= nb; i++) {
printf("Block %d:", i);
scanf("%d", &blocks[i]);
}
printf("Enter the size of the files:\n");
for (int i = 1; i <= nf; i++) {
printf("File %d:", i);
scanf("%d", &files[i]);
}
for (int i = 1; i <= nf; i++) {
for (int j = 1; j <= nb; j++) {
if (!allocated[j]) {
temp = blocks[j] - files[i];
if (temp >= 0 && lowest > temp) {
blockFit[i] = j;
lowest = temp;
}
}
}
frag[i] = lowest;
allocated[blockFit[i]] = 1;
lowest = 10000;
}
printf("\nFile No\tFile Size \tBlock No\tBlock Size\tFragment");
for (int i = 1; i <= nf && blockFit[i] != 0; i++)
printf("\n%d\t\t%d\t\t%d\t\t%d\t\t%d\n", i, files[i], blockFit[i], blocks[blockFit[i]], frag[i]);
}
OUTPUT:
RESULT
Thus, best fit Memory allocation technique was executed and verified successfully
